import { Box, Button, CircularProgress, Container, Typography } from '@mui/material';
import Head from 'next/head';
import Footer from '../components/Footer/Footer';
import Navbar from '../components/Navbar/Navbar';
import { IAppointment } from '../models/Appointments';
import { useContext, useEffect, useState } from 'react';
import LoadingButton from '@mui/lab/LoadingButton';

import { WalletContent, WalletContext } from '../services/web3/wallets/walletProvider';
import {
	cancelAppointment,
	getAppointments,
	getDoctors,
	isAppointmentOver,
} from '../services/web3/contracts/contractsProvider';

export default function YourAppointments() {
	const { isLoggedIn, getAddress } = useContext<WalletContent>(WalletContext);
	const [currentAppointments, setAppointments] = useState<IAppointment[]>([]);
	const [isLoading, setLoading] = useState(false);

	const loadAppointments = async () => {
		const doctors = await getDoctors();
		if (!doctors) return;
		let appointments: IAppointment[] = [];
		for (let i = 0; i < doctors.length; i++) {
			const doctorAppointments = await getAppointments(doctors[i]);
			appointments = appointments.concat(doctorAppointments);
		}
		appointments = appointments.filter((obj) => {
			if (obj.patient == getAddress()) {
				return obj;
			}
		});

		console.log(appointments);

		setAppointments(appointments);
	};

	useEffect(() => {
		if (isLoggedIn) {
			loadAppointments();
		}
	}, [isLoggedIn]);

	return (
		<>
			<Head>
				<title>Ã„rzte ohne Grenzen</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Navbar />
			<Box
				component="main"
				sx={{
					height: '100vh',
					position: 'relative',
					gap: '32px',
					'&::before': {
						content: '""',
						position: 'fixed',
						display: 'block',
						top: '0px',
						left: '0px',
						bottom: '0px',
						right: '0px',
						backgroundImage: 'url("/images/background.png")',
						backgroundSize: 'cover',
						backgroundRepeat: 'no-repeat',
						backgroundPosition: 'center',
						paddingBottom: '200px',
					},
				}}>
				<Container
					sx={{
						position: 'absolute',
						width: '95%',
						color: 'secondary.main',
						fontSize: '120%',
						padding: '2vw',
						mt: '100px',
						mb: '120px',
						display: 'flex',
						flexDirection: 'column',
						gap: '15px',
						transform: 'translate(2.5%, 0%)',
					}}>
					<Box
						sx={{
							color: 'secondary.main',
							backgroundColor: 'white',
							padding: '30px 10px',
							overflow: 'hidden',
							fontSize: '200%',
							fontWeight: 'bold',
							textAlign: 'center',
							width: '100%',
						}}>
						Deine Termine:{' '}
					</Box>
					<Box sx={{ display: 'flex', flexDirection: 'row', gap: '10px' }}>
						{currentAppointments.map((element) => (
							<Box
								key={element.id}
								sx={{
									width: '15vw',
									color: 'secondary.main',
									backgroundColor: 'white',
									border: '10px solid tomato',
									padding: '5px',
								}}>
								{element.canceled ? (
									<Typography sx={{ fontWeight: '1000', mb: '12px' }} variant="h5">
										Von dir Abgesagt
									</Typography>
								) : null}
								<Typography variant="h5">Termin am:</Typography>
								<Typography variant="h5">
									{element.dateTime[0]}.{element.dateTime[1]}.{element.dateTime[2]}
								</Typography>
								<br></br>
								<Typography>
									Uhrzeit: {element.dateTime[3]}:
									{element.dateTime[4] == 0 ? '00' : element.dateTime[4]} Uhr
								</Typography>
								<Typography>Dauer: {+element.duration / 60} Minuten</Typography>

								<Typography>
									Bei: {element.doctor ? element.doctor.firstname + ' ' + element.doctor.name : ''}
								</Typography>
								<br></br>
								<Typography variant="subtitle1">Adresse:</Typography>
								<Typography>
									{element.doctor
										? element.doctor.address +
										  ' ' +
										  element.doctor.zipCode +
										  ' ' +
										  element.doctor.city
										: ''}
								</Typography>
								{element.canceled ? null : (
									<LoadingButton
										loading={isLoading}
										disabled={isLoading}
										loadingIndicator={<CircularProgress sx={{ color: '#fff' }} size={16} />}
										onClick={async () => {
											if (!(await isAppointmentOver(element.doctor.id, element.id as number))) {
												setLoading(true);
												await cancelAppointment(element.doctor.id, element.id as number);
												await loadAppointments();
												setLoading(false);
											} else {
												alert('Bitte nur 24h vor dem Termin');
											}
										}}
										variant="contained"
										sx={{ mt: '12px', width: '100%', color: 'white' }}>
										Absagen
									</LoadingButton>
								)}
							</Box>
						))}
					</Box>
				</Container>
			</Box>
			<Footer />
		</>
	);
}
